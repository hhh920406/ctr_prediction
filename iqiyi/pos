import numpy as np
import pandas as pd
from datetime import datetime
from dateutil.parser import parse
import calendar
import hashlib
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import log_loss
import scipy
from scipy.sparse import coo_matrix, hstack
from sklearn.metrics import roc_auc_score

NR_BINS = 1000000
def hashstr(input):
    return int(hashlib.md5(input).hexdigest(), 16)%(NR_BINS-1)+1


train56 = pd.read_csv(r'D:\data\youmi\iqiy_data\train56.csv')
test56 =  pd.read_csv(r'D:\data\youmi\iqiy_data\test56.csv')

tr_data = train56[['spotid', 'uid', 'connt', 'w', 'h', 'pos', 'city', 'adw', 'adh', 'bidappnm', 'albumid', 'mon', 'day', 'hour', 'weekday']]
train56_y = train56['click']
te_data = test56[['spotid', 'uid', 'connt', 'w', 'h', 'pos', 'city', 'adw', 'adh', 'bidappnm', 'albumid', 'mon', 'day', 'hour', 'weekday']]
test56_y = test56['click']
#OneHotEncoding
enc = OneHotEncoder(handle_unknown = 'ignore')
train56_x = enc.fit_transform([map(int, i) for i in tr_data.values.tolist()])
test56_x = enc.transform([map(int, i) for i in te_data.values.tolist()])

#LR fit
clf_l2_LR = LogisticRegression(penalty='l2', tol=0.01)
clf_l2_LR.fit(train56_x,train56_y)

#LR predict
predict_y = clf_l2_LR.predict_proba(test56_x)

#Metrics
print log_loss(test56_y.values.tolist(),predict_y)
print roc_auc_score(test56_y, predict_y[:, 1])

test56['ctr'] = predict_y[:, 1]
res = test56[['click', 'ctr']]
res.to_csv(r'D:\data\youmi\iqiy_data\res56.csv', index = False)

#==============================维数计算==============================
for i in range(len(enc.feature_indices_)-1):
    print len(enc.active_features_[enc.active_features_<enc.feature_indices_[i+1]][enc.active_features_[enc.active_features_<enc.feature_indices_[i+1]]>=enc.feature_indices_[i]])
